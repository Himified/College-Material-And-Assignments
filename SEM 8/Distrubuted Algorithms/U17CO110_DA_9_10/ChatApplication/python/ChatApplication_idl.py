# Python stubs generated by omniidl from ../ChatApplication.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "ChatApplication"
#
__name__ = "ChatApplication"
_0_ChatApplication = omniORB.openModule("ChatApplication", r"../ChatApplication.idl")
_0_ChatApplication__POA = omniORB.openModule("ChatApplication__POA", r"../ChatApplication.idl")


# interface Moderator
_0_ChatApplication._d_Moderator = (omniORB.tcInternal.tv_objref, "IDL:ChatApplication/Moderator:1.0", "Moderator")
omniORB.typeMapping["IDL:ChatApplication/Moderator:1.0"] = _0_ChatApplication._d_Moderator
_0_ChatApplication.Moderator = omniORB.newEmptyClass()
class Moderator :
    _NP_RepositoryId = _0_ChatApplication._d_Moderator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ChatApplication.Moderator = Moderator
_0_ChatApplication._tc_Moderator = omniORB.tcInternal.createTypeCode(_0_ChatApplication._d_Moderator)
omniORB.registerType(Moderator._NP_RepositoryId, _0_ChatApplication._d_Moderator, _0_ChatApplication._tc_Moderator)

# Moderator operations and attributes
Moderator._d_login = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Moderator._d_sendMessage = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
Moderator._d_getMessages = ((), ((omniORB.tcInternal.tv_string,0), ), None)
Moderator._d_logout = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# Moderator object reference
class _objref_Moderator (CORBA.Object):
    _NP_RepositoryId = Moderator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def login(self, *args):
        return self._obj.invoke("login", _0_ChatApplication.Moderator._d_login, args)

    def sendMessage(self, *args):
        return self._obj.invoke("sendMessage", _0_ChatApplication.Moderator._d_sendMessage, args)

    def getMessages(self, *args):
        return self._obj.invoke("getMessages", _0_ChatApplication.Moderator._d_getMessages, args)

    def logout(self, *args):
        return self._obj.invoke("logout", _0_ChatApplication.Moderator._d_logout, args)

omniORB.registerObjref(Moderator._NP_RepositoryId, _objref_Moderator)
_0_ChatApplication._objref_Moderator = _objref_Moderator
del Moderator, _objref_Moderator

# Moderator skeleton
__name__ = "ChatApplication__POA"
class Moderator (PortableServer.Servant):
    _NP_RepositoryId = _0_ChatApplication.Moderator._NP_RepositoryId


    _omni_op_d = {"login": _0_ChatApplication.Moderator._d_login, "sendMessage": _0_ChatApplication.Moderator._d_sendMessage, "getMessages": _0_ChatApplication.Moderator._d_getMessages, "logout": _0_ChatApplication.Moderator._d_logout}

Moderator._omni_skeleton = Moderator
_0_ChatApplication__POA.Moderator = Moderator
omniORB.registerSkeleton(Moderator._NP_RepositoryId, Moderator)
del Moderator
__name__ = "ChatApplication"

#
# End of module "ChatApplication"
#
__name__ = "ChatApplication_idl"

_exported_modules = ( "ChatApplication", )

# The end.
